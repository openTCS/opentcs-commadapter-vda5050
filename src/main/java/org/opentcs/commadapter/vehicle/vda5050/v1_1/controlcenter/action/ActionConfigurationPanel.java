/**
 * Copyright (c) The openTCS Authors.
 *
 * This program is free software and subject to the MIT license. (For details,
 * see the licensing information (LICENSE.txt) you should have received with
 * this copy of the software.)
 */
package org.opentcs.commadapter.vehicle.vda5050.v1_1.controlcenter.action;

import static java.util.Objects.requireNonNull;

import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Supplier;
import javax.inject.Inject;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.action.InitPosition;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.controlcenter.action.prefill.ActionPrefillDialog;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.controlcenter.action.prefill.PrefillDialogFactory;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.message.common.Action;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.message.common.ActionParameter;
import org.opentcs.commadapter.vehicle.vda5050.v1_1.message.common.BlockingType;
import org.opentcs.util.gui.StringListCellRenderer;

/**
 * A panel for configuring an action.
 */
public class ActionConfigurationPanel
    extends
      javax.swing.JPanel {

  /**
   * Supplier for the prefill panel.
   */
  private Optional<Supplier<ActionPrefillDialog>> prefillDialogSupplier = Optional.empty();
  /**
   * Factory for prefill dialogs.
   */
  private final PrefillDialogFactory prefillDialogFactory;

  /**
   * Default constructor only for use with the GUI editor.
   */
  public ActionConfigurationPanel() {
    prefillDialogFactory = null;

    initComponents();
  }

  /**
   * Creates new form ActionConfigurationPanel.
   *
   * @param prefillDialogFactory The prefill dialog factory
   */
  @Inject
  public ActionConfigurationPanel(PrefillDialogFactory prefillDialogFactory) {
    this.prefillDialogFactory = requireNonNull(prefillDialogFactory, "prefillDialogFactory");

    initComponents();
    initComboBoxes();
  }

  /**
   * Returns the configured action or empty.
   *
   * @return the configured action or empty.
   */
  public Optional<Action> getAction() {
    Action selectedAction = (Action) actionTypeComboBox.getSelectedItem();
    if (selectedAction == null || selectedAction.getActionType().isBlank()) {
      return Optional.empty();
    }
    else {
      Action action = new Action(
          selectedAction.getActionType(),
          actionIdTextField.getText(),
          (BlockingType) blockingTypeComboBox.getSelectedItem()
      );
      action.setActionParameters(getTableModel().getParameters());
      return Optional.of(action);
    }
  }

  /**
   * Sets the input fields to values from the provided action.
   *
   * @param action The action.
   */
  public void setAction(Action action) {
    actionTypeComboBox.setSelectedItem(action);
    actionIdTextField.setText(action.getActionId());
    blockingTypeComboBox.setSelectedItem(action.getBlockingType());

    getTableModel().setParameters(copyOf(action.getActionParameters()));
  }

  /**
   * Clears all inputs to their defaults.
   */
  public void clear() {
    actionTypeComboBox.setSelectedIndex(-1);
    actionIdTextField.setText("1");
    blockingTypeComboBox.setSelectedIndex(0);
    getTableModel().setParameters(new ArrayList<>());
  }

  /**
   * Initializes combo boxes for destinations and actions.
   */
  private void initComboBoxes() {
    for (BlockingType type : BlockingType.values()) {
      blockingTypeComboBox.addItem(type);
    }

    actionTypeComboBox.setSelectedIndex(-1);
  }

  // FORMATTER:OFF
  // CHECKSTYLE:OFF
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    actionTypeLabel = new javax.swing.JLabel();
    actionTypeComboBox = new javax.swing.JComboBox<>();
    actionIdLabel = new javax.swing.JLabel();
    actionIdTextField = new javax.swing.JTextField();
    blockingTypeLabel = new javax.swing.JLabel();
    blockingTypeComboBox = new javax.swing.JComboBox<>();
    actionParametersLabel = new javax.swing.JLabel();
    actionParametersScrollPane = new javax.swing.JScrollPane();
    actionParametersTable = new javax.swing.JTable();
    buttonPanel = new javax.swing.JPanel();
    addParameterButton = new javax.swing.JButton();
    removeParameterButton = new javax.swing.JButton();
    prefillButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/org/opentcs/commadapter/vehicle/vda5050/v1_1/Bundle"); // NOI18N
    actionTypeLabel.setText(bundle.getString("actionConfigurationPanel.label_actionType.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    add(actionTypeLabel, gridBagConstraints);

    actionTypeComboBox.setEditable(true);
    actionTypeComboBox.setModel(new ActionComboBoxModel());
    actionTypeComboBox.setEditor(new ActionEditor());
    actionTypeComboBox.setRenderer(new StringListCellRenderer<Action>(action -> action.getActionType()));
    actionTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        actionTypeComboBoxItemStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(actionTypeComboBox, gridBagConstraints);

    actionIdLabel.setText(bundle.getString("actionConfigurationPanel.label_actionID.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    add(actionIdLabel, gridBagConstraints);

    actionIdTextField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    actionIdTextField.setText("1");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
    add(actionIdTextField, gridBagConstraints);

    blockingTypeLabel.setText(bundle.getString("actionConfigurationPanel.label_actionBlockingType.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    add(blockingTypeLabel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
    add(blockingTypeComboBox, gridBagConstraints);

    actionParametersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    actionParametersLabel.setText(bundle.getString("actionConfigurationPanel.label_actionParameterLabel.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
    add(actionParametersLabel, gridBagConstraints);

    actionParametersScrollPane.setPreferredSize(new java.awt.Dimension(200, 100));
    actionParametersScrollPane.setRowHeader(null);

    actionParametersTable.setModel(new ActionParametersTableModel());
    actionParametersTable.setTableHeader(null);
    actionParametersScrollPane.setViewportView(actionParametersTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(actionParametersScrollPane, gridBagConstraints);

    buttonPanel.setLayout(new java.awt.GridBagLayout());

    addParameterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opentcs/commadapter/vehicle/vda5050/v1_1/images/add-button.16.png"))); // NOI18N
    addParameterButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addParameterButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    buttonPanel.add(addParameterButton, gridBagConstraints);

    removeParameterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opentcs/commadapter/vehicle/vda5050/v1_1/images/delete-button.16.png"))); // NOI18N
    removeParameterButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeParameterButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    buttonPanel.add(removeParameterButton, gridBagConstraints);

    prefillButton.setText(bundle.getString("actionConfigurationPanel.button_prefill.text")); // NOI18N
    prefillButton.setEnabled(false);
    prefillButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        prefillButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    buttonPanel.add(prefillButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
    add(buttonPanel, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents
  // CHECKSTYLE:ON
  // FORMATTER:ON

  private void addParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParameterButtonActionPerformed
    int index = getTableModel().addParameter();
    actionParametersTable.setRowSelectionInterval(index, index);
    actionParametersTable.scrollRectToVisible(
        new Rectangle(actionParametersTable.getCellRect(index, 0, true))
    );
  }//GEN-LAST:event_addParameterButtonActionPerformed

  private void removeParameterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeParameterButtonActionPerformed
    if (getTableModel().getRowCount() <= 0
        || actionParametersTable.getSelectedRow() == -1) {
      return;
    }
    getTableModel().removeParameter(actionParametersTable.getSelectedRow());
  }//GEN-LAST:event_removeParameterButtonActionPerformed

  private void actionTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_actionTypeComboBoxItemStateChanged
    if (evt.getStateChange() != ItemEvent.SELECTED) {
      return;
    }

    Action selectedAction = (Action) actionTypeComboBox.getSelectedItem();
    if (selectedAction == null) {
      return;
    }

    updatePrefillButton(selectedAction);
    if (selectedAction instanceof ActionEditor.EditorAction) {
      // Preserve the current action parameters in the table for "custom" actions. These do not have
      // any predefined action parameters, which in turn would cause the table to be cleared.
      return;
    }

    getTableModel().setParameters(copyOf(selectedAction.getActionParameters()));
    blockingTypeComboBox.setSelectedItem(selectedAction.getBlockingType());
  }//GEN-LAST:event_actionTypeComboBoxItemStateChanged

  private void prefillButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefillButtonActionPerformed
    if (!prefillDialogSupplier.isPresent()) {
      return;
    }
    ActionPrefillDialog dialog = prefillDialogSupplier.get().get();
    dialog.setLocationRelativeTo(this);

    Optional<Map<String, String>> prefillParameters = dialog.showAndGetResult();
    if (!prefillParameters.isPresent()) {
      return;
    }

    // Use a LinkedHashMap to perserve to order of the original parameters.
    Map<String, ActionParameter> actionParameters = new LinkedHashMap<>();
    // add existing parameters
    getTableModel().getParameters().forEach(ap -> actionParameters.put(ap.getKey(), ap));

    // add and update parameters from prefill panel
    prefillParameters.get().entrySet().forEach(entry -> {
      actionParameters.put(
          entry.getKey(),
          new ActionParameter(entry.getKey(), entry.getValue())
      );
    });

    // write new action parameters back to table model
    getTableModel().setParameters(new ArrayList<>(actionParameters.values()));

  }//GEN-LAST:event_prefillButtonActionPerformed

  private void updatePrefillButton(Action selectedAction) {
    if (selectedAction.getActionType().equals(InitPosition.ACTION_TYPE)) {
      prefillDialogSupplier
          = Optional.of(() -> prefillDialogFactory.createInitPositionPrefillDialog(this, true));
    }
    else {
      prefillDialogSupplier = Optional.empty();
    }

    prefillButton.setEnabled(prefillDialogSupplier.isPresent());
  }

  private ActionParametersTableModel getTableModel() {
    return (ActionParametersTableModel) actionParametersTable.getModel();
  }

  private List<ActionParameter> copyOf(List<ActionParameter> actionParameters) {
    if (actionParameters == null) {
      return null;
    }

    List<ActionParameter> actionParametersCopy = new ArrayList<>();
    actionParameters.forEach(parameter -> {
      actionParametersCopy.add(new ActionParameter(parameter.getKey(), parameter.getValue()));
    });
    return actionParametersCopy;
  }

  // FORMATTER:OFF
  // CHECKSTYLE:OFF
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel actionIdLabel;
  private javax.swing.JTextField actionIdTextField;
  private javax.swing.JLabel actionParametersLabel;
  private javax.swing.JScrollPane actionParametersScrollPane;
  private javax.swing.JTable actionParametersTable;
  private javax.swing.JComboBox<Action> actionTypeComboBox;
  private javax.swing.JLabel actionTypeLabel;
  private javax.swing.JButton addParameterButton;
  private javax.swing.JComboBox<BlockingType> blockingTypeComboBox;
  private javax.swing.JLabel blockingTypeLabel;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JButton prefillButton;
  private javax.swing.JButton removeParameterButton;
  // End of variables declaration//GEN-END:variables
  // CHECKSTYLE:ON
  // FORMATTER:ON
}
